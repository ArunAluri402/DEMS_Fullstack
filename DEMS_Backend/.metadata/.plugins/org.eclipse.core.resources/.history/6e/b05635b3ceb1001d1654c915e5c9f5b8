package com.dems.main.controller;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dems.main.repository.DepartmentRepo;

import net.javaguides.springboot.exception.ResourceNotFoundException;
import net.javaguides.springboot.model.Employee;

import com.dems.main.exception.DataNotFound;
import com.dems.main.model.Department;
@CrossOrigin
@RestController
@RequestMapping("/api")
public class DepartmentController {

	    @Autowired
	    private DepartmentRepo departmentRepo;

	    @GetMapping("/dep")
	    public List<Department> getAllStates(){
	    	return departmentRepo.findAll();
	    }
	    
	    @GetMapping("/dep/id")
	    public ResponseEntity<Department> getStateById(@PathVariable Integer id) {
	    	Department dep = departmentRepo.findById(id).
	    			orElseThrow(()-> new DataNotFound("Department number : "+id+" not exists" ));
	    	return ResponseEntity.ok(dep);
	    }
	    
	    @PostMapping
	    public Department create(@RequestBody Department dep) {
	        return departmentRepo.save(dep);
	    }
	    
	    @PutMapping("/dep/{id}")
	    public ResponseEntity<Department> updateDep(@PathVariable Integer id, @RequestBody Department dep){
			Department department = departmentRepo.findById(id)
					.orElseThrow(() -> new DataNotFound("Department number : "+id+" not exists"));
			
			department.setDepName(dep.getDepName());
			department.setDepDescription(dep.getDepDescription());
			department.setDepLocation(dep.getDepLocation());
			department.setDepHOD(dep.getDepHOD());
			department.setDepEmpCount(dep.getDepEmpCount());
			
			
			Employee updatedEmployee = employeeRepository.save(employee);
			return ResponseEntity.ok(updatedEmployee);
		}
	}

